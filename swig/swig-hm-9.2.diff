Index: source/App/TAppEncoder/TAppEncCfg.cpp
===================================================================
--- source/App/TAppEncoder/TAppEncCfg.cpp	(revision 3318)
+++ source/App/TAppEncoder/TAppEncCfg.cpp	(working copy)
@@ -155,7 +155,7 @@
   const Char* str;
   Level::Tier value;
 } strToTier[] = {
-  {"main", Level::MAIN},
+  {"main", Level::MAIN_},
   {"high", Level::HIGH},
 };
 
@@ -163,7 +163,7 @@
   const Char* str;
   Level::Name value;
 } strToLevel[] = {
-  {"none",Level::NONE},
+  {"none",Level::NONE_},
   {"1",   Level::LEVEL1},
   {"2",   Level::LEVEL2},
   {"2.1", Level::LEVEL2_1},
@@ -273,8 +273,8 @@
   
   // Profile and level
   ("Profile", m_profile,   Profile::NONE, "Profile to be used when encoding (Incomplete)")
-  ("Level",   m_level,     Level::NONE,   "Level limit to be used, eg 5.1 (Incomplete)")
-  ("Tier",    m_levelTier, Level::MAIN,   "Tier to use for interpretation of --Level")
+  ("Level",   m_level,     Level::NONE_,   "Level limit to be used, eg 5.1 (Incomplete)")
+  ("Tier",    m_levelTier, Level::MAIN_,   "Tier to use for interpretation of --Level")
 
   // Unit definition parameters
   ("MaxCUWidth",              m_uiMaxCUWidth,             64u)
Index: source/App/TAppDecoder/TAppDecTop.cpp
===================================================================
--- source/App/TAppDecoder/TAppDecTop.cpp	(revision 3318)
+++ source/App/TAppDecoder/TAppDecTop.cpp	(working copy)
@@ -168,7 +168,9 @@
     }
     if (bNewPicture || !bitstreamFile)
     {
-      m_cTDecTop.executeLoopFilters(poc, pcListPic);
+      TComList<TComPic*> *rpcListPic = m_cTDecTop.executeLoopFilters(poc);
+      if (rpcListPic)
+        pcListPic = rpcListPic;
     }
 
     if( pcListPic )
Index: source/Lib/TLibDecoder/TDecSlice.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecSlice.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecSlice.cpp	(working copy)
@@ -105,7 +105,7 @@
   m_pcCuDecoder       = pcCuDecoder;
 }
 
-Void TDecSlice::decompressSlice(TComInputBitstream** ppcSubstreams, TComPic*& rpcPic, TDecSbac* pcSbacDecoder, TDecSbac* pcSbacDecoders)
+Void TDecSlice::decompressSlice(TComInputBitstream** ppcSubstreams, TComPic* rpcPic, TDecSbac* pcSbacDecoder, TDecSbac* pcSbacDecoders)
 {
   TComDataCU* pcCU;
   UInt        uiIsLast = 0;
Index: source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecBinCoderCABAC.cpp	(working copy)
@@ -105,7 +105,7 @@
 Void
 TDecBinCABAC::decodeBin( UInt& ruiBin, ContextModel &rcCtxModel )
 {
-  UInt uiLPS = TComCABACTables::sm_aucLPSTable[ rcCtxModel.getState() ][ ( m_uiRange >> 6 ) - 4 ];
+  UInt uiLPS = sm_aucLPSTable[ rcCtxModel.getState() ][ ( m_uiRange >> 6 ) - 4 ];
   m_uiRange -= uiLPS;
   UInt scaledRange = m_uiRange << 7;
   
@@ -132,7 +132,7 @@
   else
   {
     // LPS path
-    Int numBits = TComCABACTables::sm_aucRenormTable[ uiLPS >> 3 ];
+    Int numBits = sm_aucRenormTable[ uiLPS >> 3 ];
     m_uiValue   = ( m_uiValue - scaledRange ) << numBits;
     m_uiRange   = uiLPS << numBits;
     ruiBin      = 1 - rcCtxModel.getMps();
Index: source/Lib/TLibDecoder/TDecEntropy.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecEntropy.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecEntropy.cpp	(working copy)
@@ -289,7 +289,7 @@
 
 Void TDecEntropy::decodeMVPIdxPU( TComDataCU* pcSubCU, UInt uiPartAddr, UInt uiDepth, UInt uiPartIdx, RefPicList eRefList )
 {
-  Int iMVPIdx = -1;
+  Int iMVPIdx = 255;
 
   TComMv cZeroMv( 0, 0 );
   TComMv cMv     = cZeroMv;
@@ -310,7 +310,7 @@
   pcSubCU->setMVPIdxSubParts( iMVPIdx, eRefList, uiPartAddr, uiPartIdx, uiDepth );
   if ( iRefIdx >= 0 )
   {
-    m_pcPrediction->getMvPredAMVP( pcSubCU, uiPartIdx, uiPartAddr, eRefList, cMv);
+    cMv = m_pcPrediction->getMvPredAMVP( pcSubCU, uiPartIdx, uiPartAddr, eRefList);
     cMv += pcSubCUMvField->getMvd( uiPartAddr );
   }
 
Index: source/Lib/TLibDecoder/TDecTop.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecTop.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecTop.cpp	(working copy)
@@ -171,14 +171,15 @@
   rpcPic->getPicSym()->allocSaoParam(&m_cSAO);
 }
 
-Void TDecTop::executeLoopFilters(Int& poc, TComList<TComPic*>*& rpcListPic)
+TComList<TComPic*> *TDecTop::executeLoopFilters(Int& poc)
 {
   if (!m_pcPic)
   {
     /* nothing to deblock */
-    return;
+    return NULL;
   }
   
+  TComList<TComPic*>* rpcListPic = NULL;
   TComPic*&   pcPic         = m_pcPic;
 
   // Execute Deblock + Cleanup
@@ -191,7 +192,7 @@
   m_cCuDecoder.destroy();        
   m_bFirstSliceInPicture  = true;
 
-  return;
+  return rpcListPic;
 }
 
 Void TDecTop::xCreateLostPicture(Int iLostPoc) 
Index: source/Lib/TLibDecoder/TDecSlice.h
===================================================================
--- source/Lib/TLibDecoder/TDecSlice.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecSlice.h	(working copy)
@@ -80,7 +80,7 @@
   Void  create            ();
   Void  destroy           ();
   
-  Void  decompressSlice   ( TComInputBitstream** ppcSubstreams,   TComPic*& rpcPic, TDecSbac* pcSbacDecoder, TDecSbac* pcSbacDecoders );
+  Void  decompressSlice   ( TComInputBitstream** ppcSubstreams,   TComPic* rpcPic, TDecSbac* pcSbacDecoder, TDecSbac* pcSbacDecoders );
   Void      initCtxMem(  UInt i );
   Void      setCtxMem( TDecSbac* sb, Int b )   { CTXMem[b] = sb; }
 };
Index: source/Lib/TLibDecoder/TDecEntropy.h
===================================================================
--- source/Lib/TLibDecoder/TDecEntropy.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecEntropy.h	(working copy)
@@ -68,7 +68,7 @@
   virtual Void  parseSPS                  ( TComSPS* pcSPS )                                      = 0;
   virtual Void  parsePPS                  ( TComPPS* pcPPS )                                      = 0;
 
-  virtual Void parseSliceHeader          ( TComSlice*& rpcSlice, ParameterSetManagerDecoder *parameterSetManager)       = 0;
+  virtual Void parseSliceHeader          ( TComSlice* rpcSlice, ParameterSetManagerDecoder *parameterSetManager)       = 0;
 
   virtual Void  parseTerminatingBit       ( UInt& ruilsLast )                                     = 0;
   
@@ -130,7 +130,7 @@
   Void    decodeVPS                   ( TComVPS* pcVPS ) { m_pcEntropyDecoderIf->parseVPS(pcVPS); }
   Void    decodeSPS                   ( TComSPS* pcSPS     )    { m_pcEntropyDecoderIf->parseSPS(pcSPS);                    }
   Void    decodePPS                   ( TComPPS* pcPPS )    { m_pcEntropyDecoderIf->parsePPS(pcPPS);                    }
-  Void    decodeSliceHeader           ( TComSlice*& rpcSlice, ParameterSetManagerDecoder *parameterSetManager)  { m_pcEntropyDecoderIf->parseSliceHeader(rpcSlice, parameterSetManager);         }
+  Void    decodeSliceHeader           ( TComSlice* rpcSlice, ParameterSetManagerDecoder *parameterSetManager)  { m_pcEntropyDecoderIf->parseSliceHeader(rpcSlice, parameterSetManager);         }
 
   Void    decodeTerminatingBit        ( UInt& ruiIsLast )       { m_pcEntropyDecoderIf->parseTerminatingBit(ruiIsLast);     }
   
Index: source/Lib/TLibDecoder/TDecTop.h
===================================================================
--- source/Lib/TLibDecoder/TDecTop.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecTop.h	(working copy)
@@ -112,7 +112,7 @@
   
   Void  deletePicBuffer();
 
-  Void executeLoopFilters(Int& poc, TComList<TComPic*>*& rpcListPic);
+  TComList<TComPic*> *executeLoopFilters(Int& poc);
 
 protected:
   Void  xGetNewPicBuffer  (TComSlice* pcSlice, TComPic*& rpcPic);
Index: source/Lib/TLibDecoder/SEIread.cpp
===================================================================
--- source/Lib/TLibDecoder/SEIread.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/SEIread.cpp	(working copy)
@@ -77,10 +77,10 @@
   case SEI::FRAME_PACKING:
     fprintf( g_hTrace, "=========== Frame Packing Arrangement SEI message ===========\n");
     break;
-  case SEI::DISPLAY_ORIENTATION:
+  case SEI::DISPLAY_ORIENTATION_:
     fprintf( g_hTrace, "=========== Display Orientation SEI message ===========\n");
     break;
-  case SEI::TEMPORAL_LEVEL0_INDEX:
+  case SEI::TEMPORAL_LEVEL0_INDEX_:
     fprintf( g_hTrace, "=========== Temporal Level Zero Index SEI message ===========\n");
     break;
   case SEI::REGION_REFRESH_INFO:
@@ -206,11 +206,11 @@
       sei = new SEIFramePacking;
       xParseSEIFramePacking((SEIFramePacking&) *sei, payloadSize);
       break;
-    case SEI::DISPLAY_ORIENTATION:
+    case SEI::DISPLAY_ORIENTATION_:
       sei = new SEIDisplayOrientation;
       xParseSEIDisplayOrientation((SEIDisplayOrientation&) *sei, payloadSize);
       break;
-    case SEI::TEMPORAL_LEVEL0_INDEX:
+    case SEI::TEMPORAL_LEVEL0_INDEX_:
       sei = new SEITemporalLevel0Index;
       xParseSEITemporalLevel0Index((SEITemporalLevel0Index&) *sei, payloadSize);
       break;
Index: source/Lib/TLibDecoder/TDecSbac.h
===================================================================
--- source/Lib/TLibDecoder/TDecSbac.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecSbac.h	(working copy)
@@ -78,7 +78,7 @@
   Void  parseSPS                  ( TComSPS* /*pcSPS*/ ) {}
   Void  parsePPS                  ( TComPPS* /*pcPPS*/ ) {}
 
-  Void  parseSliceHeader          ( TComSlice*& /*rpcSlice*/, ParameterSetManagerDecoder* /*parameterSetManager*/) {}
+  Void  parseSliceHeader          ( TComSlice* /*rpcSlice*/, ParameterSetManagerDecoder* /*parameterSetManager*/) {}
   Void  parseTerminatingBit       ( UInt& ruiBit );
   Void  parseMVPIdx               ( Int& riMVPIdx          );
   Void  parseSaoMaxUvlc           ( UInt& val, UInt maxSymbol );
Index: source/Lib/TLibDecoder/TDecGop.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecGop.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecGop.cpp	(working copy)
@@ -102,7 +102,7 @@
 // Public member functions
 // ====================================================================================================================
 
-Void TDecGop::decompressSlice(TComInputBitstream* pcBitstream, TComPic*& rpcPic)
+Void TDecGop::decompressSlice(TComInputBitstream* pcBitstream, TComPic* rpcPic)
 {
   TComSlice*  pcSlice = rpcPic->getSlice(rpcPic->getCurrSliceIdx());
   // Table of extracted substreams.
@@ -167,7 +167,7 @@
   m_dDecTime += (Double)(clock()-iBeforeTime) / CLOCKS_PER_SEC;
 }
 
-Void TDecGop::filterPicture(TComPic*& rpcPic)
+Void TDecGop::filterPicture(TComPic* rpcPic)
 {
   TComSlice*  pcSlice = rpcPic->getSlice(rpcPic->getCurrSliceIdx());
 
Index: source/Lib/TLibDecoder/TDecCAVLC.cpp
===================================================================
--- source/Lib/TLibDecoder/TDecCAVLC.cpp	(revision 3318)
+++ source/Lib/TLibDecoder/TDecCAVLC.cpp	(working copy)
@@ -723,7 +723,7 @@
   return;
 }
 
-Void TDecCavlc::parseSliceHeader (TComSlice*& rpcSlice, ParameterSetManagerDecoder *parameterSetManager)
+Void TDecCavlc::parseSliceHeader (TComSlice* rpcSlice, ParameterSetManagerDecoder *parameterSetManager)
 {
   UInt  uiCode;
   Int   iCode;
@@ -1627,7 +1627,7 @@
     RefPicList  eRefPicList = ( iNumRef ? REF_PIC_LIST_1 : REF_PIC_LIST_0 );
     for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
     {
-      pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+      wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
 
       wp[0].uiLog2WeightDenom = uiLog2WeightDenomLuma;
       wp[1].uiLog2WeightDenom = uiLog2WeightDenomChroma;
@@ -1643,7 +1643,7 @@
       UInt  uiCode;
       for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
       {
-        pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+        wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
         READ_FLAG( uiCode, "chroma_weight_lX_flag" );      // u(1): chroma_weight_l0_flag
         wp[1].bPresentFlag = ( uiCode == 1 );
         wp[2].bPresentFlag = ( uiCode == 1 );
@@ -1652,7 +1652,7 @@
     }
     for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
     {
-      pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+      wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
       if ( wp[0].bPresentFlag ) 
       {
         Int iDeltaWeight;
@@ -1694,7 +1694,7 @@
 
     for ( Int iRefIdx=pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx<MAX_NUM_REF ; iRefIdx++ ) 
     {
-      pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+      wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
 
       wp[0].bPresentFlag = false;
       wp[1].bPresentFlag = false;
Index: source/Lib/TLibDecoder/TDecGop.h
===================================================================
--- source/Lib/TLibDecoder/TDecGop.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecGop.h	(working copy)
@@ -100,8 +100,8 @@
                  );
   Void  create  ();
   Void  destroy ();
-  Void  decompressSlice(TComInputBitstream* pcBitstream, TComPic*& rpcPic );
-  Void  filterPicture  (TComPic*& rpcPic );
+  Void  decompressSlice(TComInputBitstream* pcBitstream, TComPic* rpcPic );
+  Void  filterPicture  (TComPic* rpcPic );
 
   void setDecodedPictureHashSEIEnabled(Int enabled) { m_decodedPictureHashSEIEnabled = enabled; }
 
Index: source/Lib/TLibDecoder/TDecCAVLC.h
===================================================================
--- source/Lib/TLibDecoder/TDecCAVLC.h	(revision 3318)
+++ source/Lib/TLibDecoder/TDecCAVLC.h	(working copy)
@@ -83,12 +83,12 @@
   Void  parseSPS            ( TComSPS* pcSPS );
   Void  parsePPS            ( TComPPS* pcPPS);
   Void  parseVUI            ( TComVUI* pcVUI, TComSPS* pcSPS );
-  Void  parseSEI            ( SEIMessages& );
+  Void  parseSEI            ( SEIMessages& ) {}
   Void  parsePTL            ( TComPTL *rpcPTL, Bool profilePresentFlag, Int maxNumSubLayersMinus1 );
   Void  parseProfileTier    (ProfileTierLevel *ptl);
   Void  parseBitratePicRateInfo(TComBitRatePicRateInfo *info, Int tempLevelLow, Int tempLevelHigh);
   Void  parseHrdParameters  (TComHRD *hrd, Bool cprms_present_flag, UInt tempLevelHigh);
-  Void  parseSliceHeader    ( TComSlice*& rpcSlice, ParameterSetManagerDecoder *parameterSetManager);
+  Void  parseSliceHeader    ( TComSlice* rpcSlice, ParameterSetManagerDecoder *parameterSetManager);
   Void  parseTerminatingBit ( UInt& ruiBit );
   
   Void  parseMVPIdx         ( Int& riMVPIdx );
Index: source/Lib/TLibCommon/TComPic.h
===================================================================
--- source/Lib/TLibCommon/TComPic.h	(revision 3318)
+++ source/Lib/TLibCommon/TComPic.h	(working copy)
@@ -106,7 +106,7 @@
   TComPicSym*   getPicSym()           { return  m_apcPicSym;    }
   TComSlice*    getSlice(Int i)       { return  m_apcPicSym->getSlice(i);  }
   Int           getPOC()              { return  m_apcPicSym->getSlice(m_uiCurrSliceIdx)->getPOC();  }
-  TComDataCU*&  getCU( UInt uiCUAddr )  { return  m_apcPicSym->getCU( uiCUAddr ); }
+  TComDataCU*   getCU( UInt uiCUAddr )  { return  m_apcPicSym->getCU( uiCUAddr ); }
   
   TComPicYuv*   getPicYuvOrg()        { return  m_apcPicYuv[0]; }
   TComPicYuv*   getPicYuvRec()        { return  m_apcPicYuv[1]; }
Index: source/Lib/TLibCommon/TComMotionInfo.h
===================================================================
--- source/Lib/TLibCommon/TComMotionInfo.h	(revision 3318)
+++ source/Lib/TLibCommon/TComMotionInfo.h	(working copy)
@@ -93,7 +93,7 @@
 private:
   TComMv*   m_pcMv;
   TComMv*   m_pcMvd;
-  Char*     m_piRefIdx;
+  Short*    m_piRefIdx;
   UInt      m_uiNumPartition;
   AMVPInfo  m_cAMVPInfo;
     
@@ -152,7 +152,7 @@
     m_piRefIdx = src->m_piRefIdx + offset;
   }
   
-  Void compress(Char* pePredMode, Int scale); 
+  Void compress(UChar* pePredMode, Int scale); 
 };
 
 //! \}
Index: source/Lib/TLibCommon/TComCABACTables.h
===================================================================
--- source/Lib/TLibCommon/TComCABACTables.h	(revision 3318)
+++ source/Lib/TLibCommon/TComCABACTables.h	(working copy)
@@ -47,12 +47,8 @@
  * \brief static class for CABAC tables
  */
 
-class TComCABACTables
-{
-public:
-  const static UChar  sm_aucLPSTable[64][4];
-  const static UChar  sm_aucRenormTable[32];
-};
+extern const UChar  sm_aucLPSTable[64][4];
+extern const UChar  sm_aucRenormTable[32];
 
 
 //! \}
Index: source/Lib/TLibCommon/NAL.h
===================================================================
--- source/Lib/TLibCommon/NAL.h	(revision 3318)
+++ source/Lib/TLibCommon/NAL.h	(working copy)
@@ -88,7 +88,7 @@
  */
 struct NALUnitEBSP : public NALUnit
 {
-  std::ostringstream m_nalUnitData;
+  std::ostringstream *m_nalUnitData;
 
   /**
    * convert the OutputNALUnit #nalu# into EBSP format by writing out
@@ -96,6 +96,7 @@
    * emulation_prevention_three_byte symbols.
    */
   NALUnitEBSP(OutputNALUnit& nalu);
+  virtual ~NALUnitEBSP();
 };
 //! \}
 //! \}
Index: source/Lib/TLibCommon/TComRom.h
===================================================================
--- source/Lib/TLibCommon/TComRom.h	(revision 3318)
+++ source/Lib/TLibCommon/TComRom.h	(working copy)
@@ -51,9 +51,9 @@
 // ====================================================================================================================
 
 #define     MAX_CU_DEPTH            7                           // log2(LCUSize)
-#define     MAX_CU_SIZE             (1<<(MAX_CU_DEPTH))         // maximum allowable size of CU
+#define     MAX_CU_SIZE             128 //(1<<(MAX_CU_DEPTH))         // maximum allowable size of CU
 #define     MIN_PU_SIZE             4
-#define     MAX_NUM_SPU_W           (MAX_CU_SIZE/MIN_PU_SIZE)   // maximum number of SPU in horizontal line
+#define     MAX_NUM_SPU_W           32 //(MAX_CU_SIZE/MIN_PU_SIZE)   // maximum number of SPU in horizontal line
 
 // ====================================================================================================================
 // Initialize / destroy functions
@@ -70,7 +70,7 @@
 extern       UInt   g_auiZscanToRaster[ MAX_NUM_SPU_W*MAX_NUM_SPU_W ];
 extern       UInt   g_auiRasterToZscan[ MAX_NUM_SPU_W*MAX_NUM_SPU_W ];
 
-Void         initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt*& rpuiCurrIdx );
+Void         initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt* rpuiCurrIdx );
 Void         initRasterToZscan ( UInt uiMaxCUWidth, UInt uiMaxCUHeight, UInt uiMaxDepth         );
 
 // conversion of partition index to picture pel position
@@ -136,9 +136,9 @@
 // Angular Intra table
 // ====================================================================================================================
 
-extern const UChar g_aucIntraModeNumAng[7];
-extern const UChar g_aucIntraModeBitsAng[7];
-extern const UChar g_aucAngIntraModeOrder[NUM_INTRA_MODE];
+//extern const UChar g_aucIntraModeNumAng[7];
+//extern const UChar g_aucIntraModeBitsAng[7];
+//extern const UChar g_aucAngIntraModeOrder[NUM_INTRA_MODE];
 
 // ====================================================================================================================
 // Bit-depth
@@ -158,8 +158,8 @@
 // ==========================================
 // Mode-Dependent DST Matrices
 extern const Short g_as_DST_MAT_4 [4][4];
-extern const UChar g_aucDCTDSTMode_Vert[NUM_INTRA_MODE];
-extern const UChar g_aucDCTDSTMode_Hor[NUM_INTRA_MODE];
+//extern const UChar g_aucDCTDSTMode_Vert[NUM_INTRA_MODE];
+//extern const UChar g_aucDCTDSTMode_Hor[NUM_INTRA_MODE];
 // ==========================================
 
 // ====================================================================================================================
@@ -270,11 +270,11 @@
   },
 };
 extern Int g_quantIntraDefault8x8[64];
-extern Int g_quantIntraDefault16x16[256];
-extern Int g_quantIntraDefault32x32[1024];
+//extern Int g_quantIntraDefault16x16[256];
+//extern Int g_quantIntraDefault32x32[1024];
 extern Int g_quantInterDefault8x8[64];
-extern Int g_quantInterDefault16x16[256];
-extern Int g_quantInterDefault32x32[1024];
+//extern Int g_quantInterDefault16x16[256];
+//extern Int g_quantInterDefault32x32[1024];
 extern Int g_quantTSDefault4x4[16];
 extern UInt g_scalingListSize [SCALING_LIST_SIZE_NUM];
 extern UInt g_scalingListSizeX[SCALING_LIST_SIZE_NUM];
Index: source/Lib/TLibCommon/SEI.h
===================================================================
--- source/Lib/TLibCommon/SEI.h	(revision 3318)
+++ source/Lib/TLibCommon/SEI.h	(working copy)
@@ -62,11 +62,11 @@
     POST_FILTER_HINT                     = 22,
     TONE_MAPPING_INFO                    = 23,
     FRAME_PACKING                        = 45,
-    DISPLAY_ORIENTATION                  = 47,
+    DISPLAY_ORIENTATION_                 = 47,
     SOP_DESCRIPTION                      = 128,
     ACTIVE_PARAMETER_SETS                = 129,
     DECODING_UNIT_INFO                   = 130,
-    TEMPORAL_LEVEL0_INDEX                = 131,
+    TEMPORAL_LEVEL0_INDEX_               = 131,
     DECODED_PICTURE_HASH                 = 132,
     SCALABLE_NESTING                     = 133,
     REGION_REFRESH_INFO                  = 134,
@@ -241,7 +241,7 @@
 class SEIDisplayOrientation : public SEI
 {
 public:
-  PayloadType payloadType() const { return DISPLAY_ORIENTATION; }
+  PayloadType payloadType() const { return DISPLAY_ORIENTATION_; }
 
   SEIDisplayOrientation()
     : cancelFlag(true)
@@ -262,7 +262,7 @@
 class SEITemporalLevel0Index : public SEI
 {
 public:
-  PayloadType payloadType() const { return TEMPORAL_LEVEL0_INDEX; }
+  PayloadType payloadType() const { return TEMPORAL_LEVEL0_INDEX_; }
 
   SEITemporalLevel0Index()
     : tl0Idx(0)
Index: source/Lib/TLibCommon/TComSlice.h
===================================================================
--- source/Lib/TLibCommon/TComSlice.h	(revision 3318)
+++ source/Lib/TLibCommon/TComSlice.h	(working copy)
@@ -858,7 +858,7 @@
   Void setScalingListFlag       ( Bool b ) { m_scalingListEnabledFlag  = b;       }
   Bool getScalingListPresentFlag()         { return m_scalingListPresentFlag;     }
   Void setScalingListPresentFlag( Bool b ) { m_scalingListPresentFlag  = b;       }
-  Void setScalingList      ( TComScalingList *scalingList);
+  Void setScalingList      ( TComScalingList *scalingList) {}
   TComScalingList* getScalingList ()       { return m_scalingList; }               //!< get ScalingList class pointer in SPS
   UInt getMaxDecPicBuffering  (UInt tlayer)            { return m_uiMaxDecPicBuffering[tlayer]; }
   Void setMaxDecPicBuffering  ( UInt ui, UInt tlayer ) { m_uiMaxDecPicBuffering[tlayer] = ui;   }
@@ -889,8 +889,8 @@
   TComRefPicListModification();
   virtual ~TComRefPicListModification();
   
-  Void  create                    ();
-  Void  destroy                   ();
+  Void  create                    () {}
+  Void  destroy                   () {}
 
   Bool       getRefPicListModificationFlagL0() { return m_bRefPicListModificationFlagL0; }
   Void       setRefPicListModificationFlagL0(Bool flag) { m_bRefPicListModificationFlagL0 = flag; }
@@ -1070,7 +1070,7 @@
   Int      getDeblockingFilterTcOffsetDiv2()                  { return m_deblockingFilterTcOffsetDiv2; }              //!< get tc offset for deblocking filter
   Bool     getScalingListPresentFlag()         { return m_scalingListPresentFlag;     }
   Void     setScalingListPresentFlag( Bool b ) { m_scalingListPresentFlag  = b;       }
-  Void     setScalingList      ( TComScalingList *scalingList);
+  Void     setScalingList      ( TComScalingList *scalingList) {}
   TComScalingList* getScalingList ()          { return m_scalingList; }         //!< get ScalingList class pointer in PPS
   Bool getListsModificationPresentFlag ()          { return m_listsModificationPresentFlag; }
   Void setListsModificationPresentFlag ( Bool b )  { m_listsModificationPresentFlag = b;    }
@@ -1357,7 +1357,7 @@
   Void setTLayer             ( UInt uiTLayer )             { m_uiTLayer = uiTLayer;                  }
 
   Void setTLayerInfo( UInt uiTLayer );
-  Void decodingMarking( TComList<TComPic*>& rcListPic, Int iGOPSIze, Int& iMaxRefPicNum ); 
+  Void decodingMarking( TComList<TComPic*>& rcListPic, Int iGOPSIze, Int& iMaxRefPicNum ) {} 
   Void applyReferencePictureSet( TComList<TComPic*>& rcListPic, TComReferencePictureSet *RPSList);
   Bool isTemporalLayerSwitchingPoint( TComList<TComPic*>& rcListPic );
   Bool isStepwiseTemporalLayerSwitchingPointCandidate( TComList<TComPic*>& rcListPic );
@@ -1397,7 +1397,7 @@
   Void setFinalized                     ( Bool uiVal )      { m_bFinalized = uiVal;                       }
   Bool getFinalized                     ()                  { return m_bFinalized;                        }
   Void  setWpScaling    ( wpScalingParam  wp[2][MAX_NUM_REF][3] ) { memcpy(m_weightPredTable, wp, sizeof(wpScalingParam)*2*MAX_NUM_REF*3); }
-  Void  getWpScaling    ( RefPicList e, Int iRefIdx, wpScalingParam *&wp);
+  wpScalingParam *getWpScaling    ( RefPicList e, Int iRefIdx);
 
   Void  resetWpScaling  (wpScalingParam  wp[2][MAX_NUM_REF][3]);
   Void  initWpScaling    (wpScalingParam  wp[2][MAX_NUM_REF][3]);
Index: source/Lib/TLibCommon/TComPrediction.h
===================================================================
--- source/Lib/TLibCommon/TComPrediction.h	(revision 3318)
+++ source/Lib/TLibCommon/TComPrediction.h	(working copy)
@@ -97,7 +97,7 @@
   Void motionCompensation         ( TComDataCU*  pcCU, TComYuv* pcYuvPred, RefPicList eRefPicList = REF_PIC_LIST_X, Int iPartIdx = -1 );
   
   // motion vector prediction
-  Void getMvPredAMVP              ( TComDataCU* pcCU, UInt uiPartIdx, UInt uiPartAddr, RefPicList eRefPicList, TComMv& rcMvPred );
+  TComMv getMvPredAMVP              ( TComDataCU* pcCU, UInt uiPartIdx, UInt uiPartAddr, RefPicList eRefPicList);
   
   // Angular Intra
   Void predIntraLumaAng           ( TComPattern* pcTComPattern, UInt uiDirMode, Pel* piPred, UInt uiStride, Int iWidth, Int iHeight, Bool bAbove, Bool bLeft );
Index: source/Lib/TLibCommon/TComDataCU.h
===================================================================
--- source/Lib/TLibCommon/TComDataCU.h	(revision 3318)
+++ source/Lib/TLibCommon/TComDataCU.h	(working copy)
@@ -128,10 +128,10 @@
   // CU data
   // -------------------------------------------------------------------------------------------------------------------
   Bool*         m_skipFlag;           ///< array of skip flags
-  Char*         m_pePartSize;         ///< array of partition sizes
-  Char*         m_pePredMode;         ///< array of prediction modes
+  UChar*        m_pePartSize;         ///< array of partition sizes
+  UChar*        m_pePredMode;         ///< array of prediction modes
   Bool*         m_CUTransquantBypass;   ///< array of cu_transquant_bypass flags
-  Char*         m_phQP;               ///< array of QP values
+  UChar*        m_phQP;               ///< array of QP values
   UChar*        m_puhTrIdx;           ///< array of transform indices
   UChar*        m_puhTransformSkip[3];///< array of transform skipping flags
   UChar*        m_puhCbf[3];          ///< array of coded block flags (CBF)
@@ -183,8 +183,8 @@
   UChar*        m_puhLumaIntraDir;    ///< array of intra directions (luma)
   UChar*        m_puhChromaIntraDir;  ///< array of intra directions (chroma)
   UChar*        m_puhInterDir;        ///< array of inter directions
-  Char*         m_apiMVPIdx[2];       ///< array of motion vector predictor candidates
-  Char*         m_apiMVPNum[2];       ///< array of number of possible motion vectors predictors
+  UChar*        m_apiMVPIdx[2];       ///< array of motion vector predictor candidates
+  UChar*        m_apiMVPNum[2];       ///< array of number of possible motion vectors predictors
   Bool*         m_pbIPCMFlag;         ///< array of intra_pcm flags
 
   // -------------------------------------------------------------------------------------------------------------------
@@ -198,7 +198,7 @@
   UInt          m_uiTotalBins;       ///< sum of partition bins
   UInt*         m_sliceStartCU;    ///< Start CU address of current slice
   UInt*         m_sliceSegmentStartCU; ///< Start CU address of current slice
-  Char          m_codedQP;
+  UChar         m_codedQP;
 protected:
   
   /// add possible motion vector predictor candidates
@@ -251,8 +251,8 @@
   
   TComPic*      getPic                ()                        { return m_pcPic;           }
   TComSlice*    getSlice              ()                        { return m_pcSlice;         }
-  UInt&         getAddr               ()                        { return m_uiCUAddr;        }
-  UInt&         getZorderIdxInCU      ()                        { return m_uiAbsIdxInLCU; }
+  UInt          getAddr               ()                        { return m_uiCUAddr;        }
+  UInt          getZorderIdxInCU      ()                        { return m_uiAbsIdxInLCU; }
   UInt          getSCUAddr            ();
   UInt          getCUPelX             ()                        { return m_uiCUPelX;        }
   UInt          getCUPelY             ()                        { return m_uiCUPelY;        }
@@ -268,7 +268,7 @@
   // member functions for CU data
   // -------------------------------------------------------------------------------------------------------------------
   
-  Char*         getPartitionSize      ()                        { return m_pePartSize;        }
+  UChar*        getPartitionSize      ()                        { return m_pePartSize;        }
   PartSize      getPartitionSize      ( UInt uiIdx )            { return static_cast<PartSize>( m_pePartSize[uiIdx] ); }
   Void          setPartitionSize      ( UInt uiIdx, PartSize uh){ m_pePartSize[uiIdx] = uh;   }
   Void          setPartSizeSubParts   ( PartSize eMode, UInt uiAbsPartIdx, UInt uiDepth );
@@ -279,7 +279,7 @@
   Void         setSkipFlag           ( UInt idx, Bool skip)     { m_skipFlag[idx] = skip;   }
   Void         setSkipFlagSubParts   ( Bool skip, UInt absPartIdx, UInt depth );
 
-  Char*         getPredictionMode     ()                        { return m_pePredMode;        }
+  UChar*        getPredictionMode     ()                        { return m_pePredMode;        }
   PredMode      getPredictionMode     ( UInt uiIdx )            { return static_cast<PredMode>( m_pePredMode[uiIdx] ); }
   Bool*         getCUTransquantBypass ()                        { return m_CUTransquantBypass;        }
   Bool          getCUTransquantBypass( UInt uiIdx )             { return m_CUTransquantBypass[uiIdx]; }
@@ -296,15 +296,15 @@
   
   Void          setSizeSubParts       ( UInt uiWidth, UInt uiHeight, UInt uiAbsPartIdx, UInt uiDepth );
   
-  Char*         getQP                 ()                        { return m_phQP;              }
-  Char          getQP                 ( UInt uiIdx )            { return m_phQP[uiIdx];       }
-  Void          setQP                 ( UInt uiIdx, Char value ){ m_phQP[uiIdx] =  value;     }
+  UChar*        getQP                 ()                        { return m_phQP;              }
+  UChar         getQP                 ( UInt uiIdx )            { return m_phQP[uiIdx];       }
+  Void          setQP                 ( UInt uiIdx, Short value ){ m_phQP[uiIdx] =  value;     }
   Void          setQPSubParts         ( Int qp,   UInt uiAbsPartIdx, UInt uiDepth );
   Int           getLastValidPartIdx   ( Int iAbsPartIdx );
-  Char          getLastCodedQP        ( UInt uiAbsPartIdx );
+  UChar         getLastCodedQP        ( UInt uiAbsPartIdx );
   Void          setQPSubCUs           ( Int qp, TComDataCU* pcCU, UInt absPartIdx, UInt depth, Bool &foundNonZeroCbf );
-  Void          setCodedQP            ( Char qp )               { m_codedQP = qp;             }
-  Char          getCodedQP            ()                        { return m_codedQP;           }
+  Void          setCodedQP            ( Short qp )               { m_codedQP = qp;             }
+  UChar         getCodedQP            ()                        { return m_codedQP;           }
 
   Bool          isLosslessCoded(UInt absPartIdx);
   
@@ -321,18 +321,18 @@
   
   TComCUMvField* getCUMvField         ( RefPicList e )          { return  &m_acCUMvField[e];  }
   
-  TCoeff*&      getCoeffY             ()                        { return m_pcTrCoeffY;        }
-  TCoeff*&      getCoeffCb            ()                        { return m_pcTrCoeffCb;       }
-  TCoeff*&      getCoeffCr            ()                        { return m_pcTrCoeffCr;       }
+  TCoeff*       getCoeffY             ()                        { return m_pcTrCoeffY;        }
+  TCoeff*       getCoeffCb            ()                        { return m_pcTrCoeffCb;       }
+  TCoeff*       getCoeffCr            ()                        { return m_pcTrCoeffCr;       }
 #if ADAPTIVE_QP_SELECTION
-  Int*&         getArlCoeffY          ()                        { return m_pcArlCoeffY;       }
-  Int*&         getArlCoeffCb         ()                        { return m_pcArlCoeffCb;      }
-  Int*&         getArlCoeffCr         ()                        { return m_pcArlCoeffCr;      }
+  Int*          getArlCoeffY          ()                        { return m_pcArlCoeffY;       }
+  Int*          getArlCoeffCb         ()                        { return m_pcArlCoeffCb;      }
+  Int*          getArlCoeffCr         ()                        { return m_pcArlCoeffCr;      }
 #endif
   
-  Pel*&         getPCMSampleY         ()                        { return m_pcIPCMSampleY;     }
-  Pel*&         getPCMSampleCb        ()                        { return m_pcIPCMSampleCb;    }
-  Pel*&         getPCMSampleCr        ()                        { return m_pcIPCMSampleCr;    }
+  Pel*          getPCMSampleY         ()                        { return m_pcIPCMSampleY;     }
+  Pel*          getPCMSampleCb        ()                        { return m_pcIPCMSampleCb;    }
+  Pel*          getPCMSampleCr        ()                        { return m_pcIPCMSampleCr;    }
 
   UChar         getCbf    ( UInt uiIdx, TextType eType )                  { return m_puhCbf[g_aucConvertTxtTypeToIdx[eType]][uiIdx];  }
   UChar*        getCbf    ( TextType eType )                              { return m_puhCbf[g_aucConvertTxtTypeToIdx[eType]];         }
@@ -418,11 +418,11 @@
   Void          getPartPosition       ( UInt partIdx, Int& xP, Int& yP, Int& nPSW, Int& nPSH);
   Void          setMVPIdx             ( RefPicList eRefPicList, UInt uiIdx, Int iMVPIdx)  { m_apiMVPIdx[eRefPicList][uiIdx] = iMVPIdx;  }
   Int           getMVPIdx             ( RefPicList eRefPicList, UInt uiIdx)               { return m_apiMVPIdx[eRefPicList][uiIdx];     }
-  Char*         getMVPIdx             ( RefPicList eRefPicList )                          { return m_apiMVPIdx[eRefPicList];            }
+  UChar*        getMVPIdx             ( RefPicList eRefPicList )                          { return m_apiMVPIdx[eRefPicList];            }
 
   Void          setMVPNum             ( RefPicList eRefPicList, UInt uiIdx, Int iMVPNum ) { m_apiMVPNum[eRefPicList][uiIdx] = iMVPNum;  }
   Int           getMVPNum             ( RefPicList eRefPicList, UInt uiIdx )              { return m_apiMVPNum[eRefPicList][uiIdx];     }
-  Char*         getMVPNum             ( RefPicList eRefPicList )                          { return m_apiMVPNum[eRefPicList];            }
+  UChar*        getMVPNum             ( RefPicList eRefPicList )                          { return m_apiMVPNum[eRefPicList];            }
   
   Void          setMVPIdxSubParts     ( Int iMVPIdx, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth );
   Void          setMVPNumSubParts     ( Int iMVPNum, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth );
@@ -460,7 +460,7 @@
 
   TComDataCU*   getQpMinCuLeft              ( UInt&  uiLPartUnitIdx , UInt uiCurrAbsIdxInLCU );
   TComDataCU*   getQpMinCuAbove             ( UInt&  aPartUnitIdx , UInt currAbsIdxInLCU );
-  Char          getRefQP                    ( UInt   uiCurrAbsIdxInLCU                       );
+  UChar         getRefQP                    ( UInt   uiCurrAbsIdxInLCU                       );
 
   TComDataCU*   getPUAboveRightAdi          ( UInt&  uiARPartUnitIdx, UInt uiCurrPartUnitIdx, UInt uiPartUnitOffset = 1, Bool bEnforceSliceRestriction=true );
   TComDataCU*   getPUBelowLeftAdi           ( UInt&  uiBLPartUnitIdx, UInt uiCurrPartUnitIdx, UInt uiPartUnitOffset = 1, Bool bEnforceSliceRestriction=true );
@@ -514,7 +514,7 @@
   Double&       getTotalCost()                  { return m_dTotalCost;        }
   UInt&         getTotalDistortion()            { return m_uiTotalDistortion; }
   UInt&         getTotalBits()                  { return m_uiTotalBits;       }
-  UInt&         getTotalNumPart()               { return m_uiNumPartition;    }
+  UInt          getTotalNumPart()               { return m_uiNumPartition;    }
 
   UInt          getCoefScanIdx(UInt uiAbsPartIdx, UInt uiWidth, Bool bIsLuma, Bool bIsIntra);
 
Index: source/Lib/TLibCommon/TComWeightPrediction.cpp
===================================================================
--- source/Lib/TLibCommon/TComWeightPrediction.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComWeightPrediction.cpp	(working copy)
@@ -281,11 +281,11 @@
   { // explicit --------------------
     if ( iRefIdx0 >= 0 )
     {
-      pcSlice->getWpScaling(REF_PIC_LIST_0, iRefIdx0, wp0);
+      wp0 = pcSlice->getWpScaling(REF_PIC_LIST_0, iRefIdx0);
     }
     if ( iRefIdx1 >= 0 )
     {
-      pcSlice->getWpScaling(REF_PIC_LIST_1, iRefIdx1, wp1);
+      wp1 = pcSlice->getWpScaling(REF_PIC_LIST_1, iRefIdx1);
     }
   }
   else
Index: source/Lib/TLibCommon/TComList.h
===================================================================
--- source/Lib/TLibCommon/TComList.h	(revision 3318)
+++ source/Lib/TLibCommon/TComList.h	(working copy)
@@ -67,7 +67,7 @@
   {
     if( ! rcTComList.empty() )
     {
-      insert( this->end(), rcTComList.begin(), rcTComList.end());
+      this->insert( this->end(), rcTComList.begin(), rcTComList.end());
     }
     return *this;
   } // leszek
@@ -104,10 +104,10 @@
     }
   }
   
-  TComIterator find( const C& rcT ) // leszek
+/*TComIterator find( const C& rcT ) // leszek
   {
     return find( this->begin(), this->end(), rcT );
-  }
+  }*/
 };
 
 //! \}
Index: source/Lib/TLibCommon/TComMotionInfo.cpp
===================================================================
--- source/Lib/TLibCommon/TComMotionInfo.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComMotionInfo.cpp	(working copy)
@@ -59,7 +59,7 @@
   
   m_pcMv     = new TComMv[ uiNumPartition ];
   m_pcMvd    = new TComMv[ uiNumPartition ];
-  m_piRefIdx = new Char  [ uiNumPartition ];
+  m_piRefIdx = new Short [ uiNumPartition ];
   
   m_uiNumPartition = uiNumPartition;
 }
@@ -92,7 +92,7 @@
     m_pcMv [ i ].setZero();
     m_pcMvd[ i ].setZero();      
   }
-  assert( sizeof( *m_piRefIdx ) == 1 );
+  assert( sizeof( *m_piRefIdx ) == 2 );
   memset( m_piRefIdx, NOT_VALID, m_uiNumPartition * sizeof( *m_piRefIdx ) );
 }
 
@@ -314,7 +314,7 @@
 
 Void TComCUMvField::setAllRefIdx ( Int iRefIdx, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )
 {
-  setAll(m_piRefIdx, static_cast<Char>(iRefIdx), eCUMode, iPartAddr, uiDepth, iPartIdx);
+  setAll(m_piRefIdx, static_cast<Short>(iRefIdx), eCUMode, iPartAddr, uiDepth, iPartIdx);
 }
 
 Void TComCUMvField::setAllMvField( TComMvField const & mvField, PartSize eCUMode, Int iPartAddr, UInt uiDepth, Int iPartIdx )
@@ -327,7 +327,7 @@
  * \param pePredMode Pointer to prediction modes
  * \param scale      Factor by which to subsample motion information
  */
-Void TComCUMvField::compress(Char* pePredMode, Int scale)
+Void TComCUMvField::compress(UChar* pePredMode, Int scale)
 {
   Int N = scale * scale;
   assert( N > 0 && N <= m_uiNumPartition);
Index: source/Lib/TLibCommon/TypeDef.h
===================================================================
--- source/Lib/TLibCommon/TypeDef.h	(revision 3318)
+++ source/Lib/TLibCommon/TypeDef.h	(working copy)
@@ -472,13 +472,13 @@
 {
   enum Tier
   {
-    MAIN = 0,
+    MAIN_ = 0,
     HIGH = 1,
   };
 
   enum Name
   {
-    NONE     = 0,
+    NONE_    = 0,
     LEVEL1   = 30,
     LEVEL2   = 60,
     LEVEL2_1 = 63,
Index: source/Lib/TLibCommon/TComCABACTables.cpp
===================================================================
--- source/Lib/TLibCommon/TComCABACTables.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComCABACTables.cpp	(working copy)
@@ -40,7 +40,7 @@
 //! \ingroup TLibCommon
 //! \{
 
-const UChar TComCABACTables::sm_aucLPSTable[64][4] =
+const UChar sm_aucLPSTable[64][4] =
 {
   { 128, 176, 208, 240},
   { 128, 167, 197, 227},
@@ -108,7 +108,7 @@
   {   2,   2,   2,   2}
 };
 
-const UChar TComCABACTables::sm_aucRenormTable[32] =
+const UChar sm_aucRenormTable[32] =
 {
   6,  5,  4,  4,
   3,  3,  3,  3,
Index: source/Lib/TLibCommon/TComRom.cpp
===================================================================
--- source/Lib/TLibCommon/TComRom.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComRom.cpp	(working copy)
@@ -101,7 +101,7 @@
 
 UInt g_auiPUOffset[8] = { 0, 8, 4, 4, 2, 10, 1, 5};
 
-Void initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt*& rpuiCurrIdx )
+Void _initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt*& rpuiCurrIdx )
 {
   Int iStride = 1 << ( iMaxDepth - 1 );
   
@@ -113,12 +113,16 @@
   else
   {
     Int iStep = iStride >> iDepth;
-    initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal,                     rpuiCurrIdx );
-    initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep,               rpuiCurrIdx );
-    initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep*iStride,       rpuiCurrIdx );
-    initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep*iStride+iStep, rpuiCurrIdx );
+    _initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal,                     rpuiCurrIdx );
+    _initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep,               rpuiCurrIdx );
+    _initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep*iStride,       rpuiCurrIdx );
+    _initZscanToRaster( iMaxDepth, iDepth+1, uiStartVal+iStep*iStride+iStep, rpuiCurrIdx );
   }
 }
+Void initZscanToRaster ( Int iMaxDepth, Int iDepth, UInt uiStartVal, UInt* rpuiCurrIdx )
+{
+  _initZscanToRaster(iMaxDepth, iDepth, uiStartVal, rpuiCurrIdx);
+}
 
 Void initRasterToZscan ( UInt uiMaxCUWidth, UInt uiMaxCUHeight, UInt uiMaxDepth )
 {
Index: source/Lib/TLibCommon/TComSlice.cpp
===================================================================
--- source/Lib/TLibCommon/TComSlice.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComSlice.cpp	(working copy)
@@ -1121,9 +1121,9 @@
  * \param *&wpScalingParam
  * \returns Void
  */
-Void  TComSlice::getWpScaling( RefPicList e, Int iRefIdx, wpScalingParam *&wp )
+wpScalingParam *TComSlice::getWpScaling( RefPicList e, Int iRefIdx)
 {
-  wp = m_weightPredTable[e][iRefIdx];
+  return m_weightPredTable[e][iRefIdx];
 }
 
 /** reset Default WP tables settings : no weight. 
Index: source/Lib/TLibCommon/TComPrediction.cpp
===================================================================
--- source/Lib/TLibCommon/TComPrediction.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComPrediction.cpp	(working copy)
@@ -657,8 +657,9 @@
 }
 
 // AMVP
-Void TComPrediction::getMvPredAMVP( TComDataCU* pcCU, UInt uiPartIdx, UInt uiPartAddr, RefPicList eRefPicList, TComMv& rcMvPred )
+TComMv TComPrediction::getMvPredAMVP( TComDataCU* pcCU, UInt uiPartIdx, UInt uiPartAddr, RefPicList eRefPicList)
 {
+  TComMv rcMvPred;
   AMVPInfo* pcAMVPInfo = pcCU->getCUMvField(eRefPicList)->getAMVPInfo();
   if( pcAMVPInfo->iN <= 1 )
   {
@@ -666,12 +667,12 @@
 
     pcCU->setMVPIdxSubParts( 0, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));
     pcCU->setMVPNumSubParts( pcAMVPInfo->iN, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));
-    return;
+    return rcMvPred;
   }
 
-  assert(pcCU->getMVPIdx(eRefPicList,uiPartAddr) >= 0);
+  assert(pcCU->getMVPIdx(eRefPicList,uiPartAddr) != 255);
   rcMvPred = pcAMVPInfo->m_acMvCand[pcCU->getMVPIdx(eRefPicList,uiPartAddr)];
-  return;
+  return rcMvPred;
 }
 
 /** Function for deriving planar intra prediction.
Index: source/Lib/TLibCommon/TComDataCU.cpp
===================================================================
--- source/Lib/TLibCommon/TComDataCU.cpp	(revision 3318)
+++ source/Lib/TLibCommon/TComDataCU.cpp	(working copy)
@@ -132,16 +132,16 @@
   
   if ( !bDecSubCu )
   {
-    m_phQP               = (Char*     )xMalloc(Char,     uiNumPartition);
+    m_phQP               = (UChar*    )xMalloc(Char,     uiNumPartition);
     m_puhDepth           = (UChar*    )xMalloc(UChar,    uiNumPartition);
     m_puhWidth           = (UChar*    )xMalloc(UChar,    uiNumPartition);
     m_puhHeight          = (UChar*    )xMalloc(UChar,    uiNumPartition);
 
     m_skipFlag           = new Bool[ uiNumPartition ];
 
-    m_pePartSize         = new Char[ uiNumPartition ];
+    m_pePartSize         = new UChar[ uiNumPartition ];
     memset( m_pePartSize, SIZE_NONE,uiNumPartition * sizeof( *m_pePartSize ) );
-    m_pePredMode         = new Char[ uiNumPartition ];
+    m_pePredMode         = new UChar[ uiNumPartition ];
     m_CUTransquantBypass = new Bool[ uiNumPartition ];
     m_pbMergeFlag        = (Bool*  )xMalloc(Bool,   uiNumPartition);
     m_puhMergeIndex      = (UChar* )xMalloc(UChar,  uiNumPartition);
@@ -158,12 +158,12 @@
     m_puhCbf[1]          = (UChar* )xMalloc(UChar,  uiNumPartition);
     m_puhCbf[2]          = (UChar* )xMalloc(UChar,  uiNumPartition);
     
-    m_apiMVPIdx[0]       = new Char[ uiNumPartition ];
-    m_apiMVPIdx[1]       = new Char[ uiNumPartition ];
-    m_apiMVPNum[0]       = new Char[ uiNumPartition ];
-    m_apiMVPNum[1]       = new Char[ uiNumPartition ];
-    memset( m_apiMVPIdx[0], -1,uiNumPartition * sizeof( Char ) );
-    memset( m_apiMVPIdx[1], -1,uiNumPartition * sizeof( Char ) );
+    m_apiMVPIdx[0]       = new UChar[ uiNumPartition ];
+    m_apiMVPIdx[1]       = new UChar[ uiNumPartition ];
+    m_apiMVPNum[0]       = new UChar[ uiNumPartition ];
+    m_apiMVPNum[1]       = new UChar[ uiNumPartition ];
+    memset( m_apiMVPIdx[0], -1,uiNumPartition * sizeof( UChar ) );
+    memset( m_apiMVPIdx[1], -1,uiNumPartition * sizeof( UChar ) );
     
     m_pcTrCoeffY         = (TCoeff*)xMalloc(TCoeff, uiWidth*uiHeight);
     m_pcTrCoeffCb        = (TCoeff*)xMalloc(TCoeff, uiWidth*uiHeight/4);
@@ -432,10 +432,10 @@
     memset( m_puhTransformSkip[2] + firstElement, 0,                      numElements * sizeof( *m_puhTransformSkip[2]) );
     memset( m_puhWidth          + firstElement, g_uiMaxCUWidth,           numElements * sizeof( *m_puhWidth ) );
     memset( m_puhHeight         + firstElement, g_uiMaxCUHeight,          numElements * sizeof( *m_puhHeight ) );
-    memset( m_apiMVPIdx[0]      + firstElement, -1,                       numElements * sizeof( *m_apiMVPIdx[0] ) );
-    memset( m_apiMVPIdx[1]      + firstElement, -1,                       numElements * sizeof( *m_apiMVPIdx[1] ) );
-    memset( m_apiMVPNum[0]      + firstElement, -1,                       numElements * sizeof( *m_apiMVPNum[0] ) );
-    memset( m_apiMVPNum[1]      + firstElement, -1,                       numElements * sizeof( *m_apiMVPNum[1] ) );
+    memset( m_apiMVPIdx[0]      + firstElement, 255,                      numElements * sizeof( *m_apiMVPIdx[0] ) );
+    memset( m_apiMVPIdx[1]      + firstElement, 255,                      numElements * sizeof( *m_apiMVPIdx[1] ) );
+    memset( m_apiMVPNum[0]      + firstElement, 255,                      numElements * sizeof( *m_apiMVPNum[0] ) );
+    memset( m_apiMVPNum[1]      + firstElement, 255,                      numElements * sizeof( *m_apiMVPNum[1] ) );
     memset( m_phQP              + firstElement, getSlice()->getSliceQp(), numElements * sizeof( *m_phQP ) );
     memset( m_pbMergeFlag       + firstElement, false,                    numElements * sizeof( *m_pbMergeFlag ) );
     memset( m_puhMergeIndex     + firstElement, 0,                        numElements * sizeof( *m_puhMergeIndex ) );
@@ -556,10 +556,10 @@
   {
     if(getPic()->getPicSym()->getInverseCUOrderMap(getAddr())*m_pcPic->getNumPartInCU()+m_uiAbsIdxInLCU+ui >= getSlice()->getSliceSegmentCurStartCUAddr())
     {
-      m_apiMVPIdx[0][ui] = -1;
-      m_apiMVPIdx[1][ui] = -1;
-      m_apiMVPNum[0][ui] = -1;
-      m_apiMVPNum[1][ui] = -1;
+      m_apiMVPIdx[0][ui] = 255;
+      m_apiMVPIdx[1][ui] = 255;
+      m_apiMVPNum[0][ui] = 255;
+      m_apiMVPNum[1][ui] = 255;
       m_puhDepth  [ui] = uiDepth;
       m_puhWidth  [ui] = uhWidth;
       m_puhHeight [ui] = uhHeight;
@@ -663,10 +663,10 @@
     m_pePartSize[ui] = SIZE_NONE;
     m_pePredMode[ui] = MODE_NONE;
     m_CUTransquantBypass[ui] = false;
-    m_apiMVPIdx[0][ui] = -1;
-    m_apiMVPIdx[1][ui] = -1;
-    m_apiMVPNum[0][ui] = -1;
-    m_apiMVPNum[1][ui] = -1;
+    m_apiMVPIdx[0][ui] = 255;
+    m_apiMVPIdx[1][ui] = 255;
+    m_apiMVPNum[0][ui] = 255;
+    m_apiMVPNum[1][ui] = 255;
     if(m_pcPic->getPicSym()->getInverseCUOrderMap(getAddr())*m_pcPic->getNumPartInCU()+m_uiAbsIdxInLCU+ui<getSlice()->getSliceSegmentCurStartCUAddr())
     {
       m_apiMVPIdx[0][ui] = pcCU->m_apiMVPIdx[0][uiPartOffset+ui];
@@ -989,7 +989,7 @@
 // It is used to predict for next part
 Void TComDataCU::copyToPic( UChar uhDepth )
 {
-  TComDataCU*& rpcCU = m_pcPic->getCU( m_uiCUAddr );
+  TComDataCU* rpcCU = m_pcPic->getCU( m_uiCUAddr );
   
   rpcCU->getTotalCost()       = m_dTotalCost;
   rpcCU->getTotalDistortion() = m_uiTotalDistortion;
@@ -1059,7 +1059,7 @@
 
 Void TComDataCU::copyToPic( UChar uhDepth, UInt uiPartIdx, UInt uiPartDepth )
 {
-  TComDataCU*&  rpcCU       = m_pcPic->getCU( m_uiCUAddr );
+  TComDataCU*   rpcCU       = m_pcPic->getCU( m_uiCUAddr );
   UInt          uiQNumPart  = m_uiNumPartition>>(uiPartDepth<<1);
   
   UInt uiPartStart          = uiPartIdx*uiQNumPart;
@@ -1543,7 +1543,7 @@
 *\param   uiCurrAbsIdxInLCU
 *\returns Char   reference QP value
 */
-Char TComDataCU::getRefQP( UInt uiCurrAbsIdxInLCU )
+UChar TComDataCU::getRefQP( UInt uiCurrAbsIdxInLCU )
 {
   UInt        lPartIdx = 0, aPartIdx = 0;
   TComDataCU* cULeft  = getQpMinCuLeft ( lPartIdx, m_uiAbsIdxInLCU + uiCurrAbsIdxInLCU );
@@ -1563,7 +1563,7 @@
   return iLastValidPartIdx;
 }
 
-Char TComDataCU::getLastCodedQP( UInt uiAbsPartIdx )
+UChar TComDataCU::getLastCodedQP( UInt uiAbsPartIdx )
 {
   UInt uiQUPartIdxMask = ~((1<<((g_uiMaxCUDepth - getSlice()->getPPS()->getMaxCuDQPDepth())<<1))-1);
   Int iLastValidPartIdx = getLastValidPartIdx( uiAbsPartIdx&uiQUPartIdxMask );
@@ -2007,12 +2007,12 @@
 
 Void TComDataCU::setMVPIdxSubParts( Int iMVPIdx, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )
 {
-  setSubPart<Char>( iMVPIdx, m_apiMVPIdx[eRefPicList], uiAbsPartIdx, uiDepth, uiPartIdx );
+  setSubPart<UChar>( iMVPIdx, m_apiMVPIdx[eRefPicList], uiAbsPartIdx, uiDepth, uiPartIdx );
 }
 
 Void TComDataCU::setMVPNumSubParts( Int iMVPNum, RefPicList eRefPicList, UInt uiAbsPartIdx, UInt uiPartIdx, UInt uiDepth )
 {
-  setSubPart<Char>( iMVPNum, m_apiMVPNum[eRefPicList], uiAbsPartIdx, uiDepth, uiPartIdx );
+  setSubPart<UChar>( iMVPNum, m_apiMVPNum[eRefPicList], uiAbsPartIdx, uiDepth, uiPartIdx );
 }
 
 
Index: source/Lib/TLibCommon/TComPicSym.h
===================================================================
--- source/Lib/TLibCommon/TComPicSym.h	(revision 3318)
+++ source/Lib/TLibCommon/TComPicSym.h	(working copy)
@@ -119,7 +119,7 @@
   UInt        getMinCUWidth()           { return m_uiMinCUWidth;                }
   UInt        getMinCUHeight()          { return m_uiMinCUHeight;               }
   UInt        getNumberOfCUsInFrame()   { return m_uiNumCUsInFrame;  }
-  TComDataCU*&  getCU( UInt uiCUAddr )  { return m_apcTComDataCU[uiCUAddr];     }
+  TComDataCU*  getCU( UInt uiCUAddr )  { return m_apcTComDataCU[uiCUAddr];     }
   
   Void        setSlice(TComSlice* p, UInt i) { m_apcTComSlice[i] = p;           }
   UInt        getNumAllocatedSlice()    { return m_uiNumAllocatedSlice;         }
Index: source/Lib/TLibEncoder/TEncCavlc.h
===================================================================
--- source/Lib/TLibEncoder/TEncCavlc.h	(revision 3318)
+++ source/Lib/TLibEncoder/TEncCavlc.h	(working copy)
@@ -140,7 +140,7 @@
   
   Void xCodePredWeightTable          ( TComSlice* pcSlice );
   Void updateContextTables           ( SliceType eSliceType, Int iQp, Bool bExecuteFinish=true ) { return;   }
-  Void updateContextTables           ( SliceType eSliceType, Int iQp  )                          { return;   }
+//Void updateContextTables           ( SliceType eSliceType, Int iQp  )                          { return;   }
 
   Void codeScalingList  ( TComScalingList* scalingList );
   Void xCodeScalingList ( TComScalingList* scalingList, UInt sizeId, UInt listId);
Index: source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.cpp	(working copy)
@@ -2133,7 +2133,7 @@
  * \param yCbCr color component index
  * \param lambda 
  */
-inline Int64 TEncSampleAdaptiveOffset::estSaoTypeDist(Int compIdx, Int typeIdx, Int shift, Double lambda, Int *currentDistortionTableBo, Double *currentRdCostTableBo)
+Int64 TEncSampleAdaptiveOffset::estSaoTypeDist(Int compIdx, Int typeIdx, Int shift, Double lambda, Int *currentDistortionTableBo, Double *currentRdCostTableBo)
 {
   Int64 estDist = 0;
   Int classIdx;
@@ -2179,11 +2179,11 @@
   return estDist;
 }
 
-inline Int64 TEncSampleAdaptiveOffset::estSaoDist(Int64 count, Int64 offset, Int64 offsetOrg, Int shift)
+Int64 TEncSampleAdaptiveOffset::estSaoDist(Int64 count, Int64 offset, Int64 offsetOrg, Int shift)
 {
   return (( count*offset*offset-offsetOrg*offset*2 ) >> shift);
 }
-inline Int64 TEncSampleAdaptiveOffset::estIterOffset(Int typeIdx, Int classIdx, Double lambda, Int64 offsetInput, Int64 count, Int64 offsetOrg, Int shift, Int bitIncrease, Int *currentDistortionTableBo, Double *currentRdCostTableBo, Int offsetTh )
+Int64 TEncSampleAdaptiveOffset::estIterOffset(Int typeIdx, Int classIdx, Double lambda, Int64 offsetInput, Int64 count, Int64 offsetOrg, Int shift, Int bitIncrease, Int *currentDistortionTableBo, Double *currentRdCostTableBo, Int offsetTh )
 {
   //Clean up, best_q_offset.
   Int64 iterOffset, tempOffset;
Index: source/Lib/TLibEncoder/NALwrite.h
===================================================================
--- source/Lib/TLibEncoder/NALwrite.h	(revision 3318)
+++ source/Lib/TLibEncoder/NALwrite.h	(working copy)
@@ -77,8 +77,13 @@
 inline NALUnitEBSP::NALUnitEBSP(OutputNALUnit& nalu)
   : NALUnit(nalu)
 {
-  write(m_nalUnitData, nalu);
+  m_nalUnitData = new std::ostringstream();
+  write(*m_nalUnitData, nalu);
 }
+inline NALUnitEBSP::~NALUnitEBSP()
+{
+  delete m_nalUnitData;
+}
 
 void copyNaluData(OutputNALUnit& naluDest, const OutputNALUnit& naluSrc);
 
Index: source/Lib/TLibEncoder/AnnexBwrite.h
===================================================================
--- source/Lib/TLibEncoder/AnnexBwrite.h	(revision 3318)
+++ source/Lib/TLibEncoder/AnnexBwrite.h	(working copy)
@@ -75,8 +75,8 @@
       out.write(start_code_prefix+1, 3);
       size += 3;
     }
-    out << nalu.m_nalUnitData.str();
-    size += UInt(nalu.m_nalUnitData.str().size());
+    out << nalu.m_nalUnitData->str();
+    size += UInt(nalu.m_nalUnitData->str().size());
 
     annexBsizes.push_back(size);
   }
Index: source/Lib/TLibEncoder/TEncGOP.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncGOP.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/TEncGOP.cpp	(working copy)
@@ -779,7 +779,7 @@
       writeRBSPTrailingBits(nalu.m_Bitstream);
       accessUnit.push_back(new NALUnitEBSP(nalu));
 #if RATE_CONTROL_LAMBDA_DOMAIN
-      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData.str().size()) * 8;
+      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData->str().size()) * 8;
 #endif
 
       nalu = NALUnit(NAL_UNIT_SPS);
@@ -812,7 +812,7 @@
       writeRBSPTrailingBits(nalu.m_Bitstream);
       accessUnit.push_back(new NALUnitEBSP(nalu));
 #if RATE_CONTROL_LAMBDA_DOMAIN
-      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData.str().size()) * 8;
+      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData->str().size()) * 8;
 #endif
 
       nalu = NALUnit(NAL_UNIT_PPS);
@@ -821,7 +821,7 @@
       writeRBSPTrailingBits(nalu.m_Bitstream);
       accessUnit.push_back(new NALUnitEBSP(nalu));
 #if RATE_CONTROL_LAMBDA_DOMAIN
-      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData.str().size()) * 8;
+      actualTotalBits += UInt(accessUnit.back()->m_nalUnitData->str().size()) * 8;
 #endif
 
       if(m_pcCfg->getActiveParameterSetsSEIEnabled())
@@ -1234,7 +1234,7 @@
           xWriteTileLocationToSliceHeader(nalu, pcBitstreamRedirect, pcSlice);
           accessUnit.push_back(new NALUnitEBSP(nalu));
 #if RATE_CONTROL_LAMBDA_DOMAIN
-          actualTotalBits += UInt(accessUnit.back()->m_nalUnitData.str().size()) * 8;
+          actualTotalBits += UInt(accessUnit.back()->m_nalUnitData->str().size()) * 8;
 #endif
           bNALUAlignedWrittenToList = true; 
           uiOneBitstreamPerSliceLength += nalu.m_Bitstream.getNumberOfWrittenBits(); // length of bitstream after byte-alignment
@@ -1258,7 +1258,7 @@
             UInt numRBSPBytes = 0;
             for (AccessUnit::const_iterator it = accessUnit.begin(); it != accessUnit.end(); it++)
             {
-              UInt numRBSPBytes_nal = UInt((*it)->m_nalUnitData.str().size());
+              UInt numRBSPBytes_nal = UInt((*it)->m_nalUnitData->str().size());
               if ((*it)->m_nalUnitType != NAL_UNIT_SEI && (*it)->m_nalUnitType != NAL_UNIT_SEI_SUFFIX)
               {
                 numRBSPBytes += numRBSPBytes_nal;
@@ -1885,7 +1885,7 @@
   UInt numRBSPBytes = 0;
   for (AccessUnit::const_iterator it = accessUnit.begin(); it != accessUnit.end(); it++)
   {
-    UInt numRBSPBytes_nal = UInt((*it)->m_nalUnitData.str().size());
+    UInt numRBSPBytes_nal = UInt((*it)->m_nalUnitData->str().size());
 #if VERBOSE_RATE
     printf("*** %6s numBytesInNALunit: %u\n", nalUnitTypeToString((*it)->m_nalUnitType), numRBSPBytes_nal);
 #endif
Index: source/Lib/TLibEncoder/TEncCavlc.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncCavlc.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/TEncCavlc.cpp	(working copy)
@@ -1279,7 +1279,7 @@
 
       for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
       {
-        pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+        wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
         if ( !bDenomCoded ) 
         {
           Int iDeltaDenom;
@@ -1299,7 +1299,7 @@
       {
         for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
         {
-          pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+          wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
           WRITE_FLAG( wp[1].bPresentFlag, "chroma_weight_lX_flag" );           // u(1): chroma_weight_lX_flag
           uiTotalSignalledWeightFlags += 2*wp[1].bPresentFlag;
         }
@@ -1307,7 +1307,7 @@
 
       for ( Int iRefIdx=0 ; iRefIdx<pcSlice->getNumRefIdx(eRefPicList) ; iRefIdx++ ) 
       {
-        pcSlice->getWpScaling(eRefPicList, iRefIdx, wp);
+        wp = pcSlice->getWpScaling(eRefPicList, iRefIdx);
         if ( wp[0].bPresentFlag ) 
         {
           Int iDeltaWeight = (wp[0].iWeight - (1<<wp[0].uiLog2WeightDenom));
Index: source/Lib/TLibEncoder/TEncSlice.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncSlice.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/TEncSlice.cpp	(working copy)
@@ -918,7 +918,7 @@
        uiCUAddr = rpcPic->getPicSym()->getCUOrderMap(++uiEncCUOrder) )
   {
     // initialize CU encoder
-    TComDataCU*& pcCU = rpcPic->getCU( uiCUAddr );
+    TComDataCU* pcCU = rpcPic->getCU( uiCUAddr );
     pcCU->initCU( rpcPic, uiCUAddr );
 
 #if !RATE_CONTROL_LAMBDA_DOMAIN
@@ -1379,7 +1379,7 @@
       }
     }
 
-    TComDataCU*& pcCU = rpcPic->getCU( uiCUAddr );    
+    TComDataCU* pcCU = rpcPic->getCU( uiCUAddr );    
     if ( pcSlice->getSPS()->getUseSAO() && (pcSlice->getSaoEnabledFlag()||pcSlice->getSaoEnabledFlagChroma()) )
     {
       SAOParam *saoParam = pcSlice->getPic()->getPicSym()->getSaoParam();
Index: source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp
===================================================================
--- source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/TEncBinCoderCABAC.cpp	(working copy)
@@ -194,12 +194,12 @@
   m_uiBinsCoded += m_binCountIncrement;
   rcCtxModel.setBinsCoded( 1 );
   
-  UInt  uiLPS   = TComCABACTables::sm_aucLPSTable[ rcCtxModel.getState() ][ ( m_uiRange >> 6 ) & 3 ];
+  UInt  uiLPS   = sm_aucLPSTable[ rcCtxModel.getState() ][ ( m_uiRange >> 6 ) & 3 ];
   m_uiRange    -= uiLPS;
   
   if( binValue != rcCtxModel.getMps() )
   {
-    Int numBits = TComCABACTables::sm_aucRenormTable[ uiLPS >> 3 ];
+    Int numBits = sm_aucRenormTable[ uiLPS >> 3 ];
     m_uiLow     = ( m_uiLow + m_uiRange ) << numBits;
     m_uiRange   = uiLPS << numBits;
     rcCtxModel.updateLPS();
Index: source/Lib/TLibEncoder/TEncEntropy.h
===================================================================
--- source/Lib/TLibEncoder/TEncEntropy.h	(revision 3318)
+++ source/Lib/TLibEncoder/TEncEntropy.h	(working copy)
@@ -111,8 +111,8 @@
   virtual Void codeSaoUflc         ( UInt uiLength, UInt   uiCode ) = 0;
   virtual Void estBit               (estBitsSbacStruct* pcEstBitsSbac, Int width, Int height, TextType eTType) = 0;
   
-  virtual Void updateContextTables ( SliceType eSliceType, Int iQp, Bool bExecuteFinish )   = 0;
-  virtual Void updateContextTables ( SliceType eSliceType, Int iQp )   = 0;
+  virtual Void updateContextTables ( SliceType eSliceType, Int iQp, Bool bExecuteFinish=true )   = 0;
+//virtual Void updateContextTables ( SliceType eSliceType, Int iQp )   = 0;
 
   virtual Void codeDFFlag (UInt uiCode, const Char *pSymbolName) = 0;
   virtual Void codeDFSvlc (Int iCode, const Char *pSymbolName)   = 0;
@@ -174,8 +174,8 @@
   Void encodeQtRootCbfZero     ( TComDataCU* pcCU, UInt uiAbsPartIdx );
   Void encodeQtRootCbf         ( TComDataCU* pcCU, UInt uiAbsPartIdx );
   Void encodeQP                ( TComDataCU* pcCU, UInt uiAbsPartIdx, Bool bRD = false );
-  Void updateContextTables     ( SliceType eSliceType, Int iQp, Bool bExecuteFinish )   { m_pcEntropyCoderIf->updateContextTables( eSliceType, iQp, bExecuteFinish );     }
-  Void updateContextTables     ( SliceType eSliceType, Int iQp )                        { m_pcEntropyCoderIf->updateContextTables( eSliceType, iQp, true );               }
+  Void updateContextTables     ( SliceType eSliceType, Int iQp, Bool bExecuteFinish=true )   { m_pcEntropyCoderIf->updateContextTables( eSliceType, iQp, bExecuteFinish );     }
+//Void updateContextTables     ( SliceType eSliceType, Int iQp )                        { m_pcEntropyCoderIf->updateContextTables( eSliceType, iQp, true );               }
 
   Void encodeScalingList       ( TComScalingList* scalingList );
 
Index: source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h
===================================================================
--- source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h	(revision 3318)
+++ source/Lib/TLibEncoder/TEncSampleAdaptiveOffset.h	(working copy)
@@ -127,9 +127,9 @@
 #endif
   Void saoComponentParamDist(Int allowMergeLeft, Int allowMergeUp, SAOParam *saoParam, Int addr, Int addrUp, Int addrLeft, Int yCbCr, Double lambda, SaoLcuParam *compSaoParam, Double *distortion);
   Void sao2ChromaParamDist(Int allowMergeLeft, Int allowMergeUp, SAOParam *saoParam, Int addr, Int addrUp, Int addrLeft, Double lambda, SaoLcuParam *crSaoParam, SaoLcuParam *cbSaoParam, Double *distortion);
-  inline Int64 estSaoDist(Int64 count, Int64 offset, Int64 offsetOrg, Int shift);
-  inline Int64 estIterOffset(Int typeIdx, Int classIdx, Double lambda, Int64 offsetInput, Int64 count, Int64 offsetOrg, Int shift, Int bitIncrease, Int *currentDistortionTableBo, Double *currentRdCostTableBo, Int offsetTh );
-  inline Int64 estSaoTypeDist(Int compIdx, Int typeIdx, Int shift, Double lambda, Int *currentDistortionTableBo, Double *currentRdCostTableBo);
+  Int64 estSaoDist(Int64 count, Int64 offset, Int64 offsetOrg, Int shift);
+  Int64 estIterOffset(Int typeIdx, Int classIdx, Double lambda, Int64 offsetInput, Int64 count, Int64 offsetOrg, Int shift, Int bitIncrease, Int *currentDistortionTableBo, Double *currentRdCostTableBo, Int offsetTh );
+  Int64 estSaoTypeDist(Int compIdx, Int typeIdx, Int shift, Double lambda, Int *currentDistortionTableBo, Double *currentRdCostTableBo);
   Void setMaxNumOffsetsPerPic(Int iVal) {m_maxNumOffsetsPerPic = iVal; }
   Int  getMaxNumOffsetsPerPic() {return m_maxNumOffsetsPerPic; }
 };
Index: source/Lib/TLibEncoder/TEncSbac.h
===================================================================
--- source/Lib/TLibEncoder/TEncSbac.h	(revision 3318)
+++ source/Lib/TLibEncoder/TEncSbac.h	(working copy)
@@ -165,7 +165,7 @@
   Void estSignificantCoefficientsBit ( estBitsSbacStruct* pcEstBitsSbac, UInt uiCTXIdx, TextType eTType );
   
   Void updateContextTables           ( SliceType eSliceType, Int iQp, Bool bExecuteFinish=true  );
-  Void updateContextTables           ( SliceType eSliceType, Int iQp  ) { this->updateContextTables( eSliceType, iQp, true); };
+//Void updateContextTables           ( SliceType eSliceType, Int iQp  ) { this->updateContextTables( eSliceType, iQp, true); };
   
   TEncBinIf* getEncBinIf()  { return m_pcBinIf; }
 private:
Index: source/Lib/TLibEncoder/SEIwrite.cpp
===================================================================
--- source/Lib/TLibEncoder/SEIwrite.cpp	(revision 3318)
+++ source/Lib/TLibEncoder/SEIwrite.cpp	(working copy)
@@ -71,10 +71,10 @@
   case SEI::FRAME_PACKING:
     fprintf( g_hTrace, "=========== Frame Packing Arrangement SEI message ===========\n");
     break;
-  case SEI::DISPLAY_ORIENTATION:
+  case SEI::DISPLAY_ORIENTATION_:
     fprintf( g_hTrace, "=========== Display Orientation SEI message ===========\n");
     break;
-  case SEI::TEMPORAL_LEVEL0_INDEX:
+  case SEI::TEMPORAL_LEVEL0_INDEX_:
     fprintf( g_hTrace, "=========== Temporal Level Zero Index SEI message ===========\n");
     break;
   case SEI::REGION_REFRESH_INFO:
@@ -118,10 +118,10 @@
   case SEI::FRAME_PACKING:
     xWriteSEIFramePacking(*static_cast<const SEIFramePacking*>(&sei));
     break;
-  case SEI::DISPLAY_ORIENTATION:
+  case SEI::DISPLAY_ORIENTATION_:
     xWriteSEIDisplayOrientation(*static_cast<const SEIDisplayOrientation*>(&sei));
     break;
-  case SEI::TEMPORAL_LEVEL0_INDEX:
+  case SEI::TEMPORAL_LEVEL0_INDEX_:
     xWriteSEITemporalLevel0Index(*static_cast<const SEITemporalLevel0Index*>(&sei));
     break;
   case SEI::REGION_REFRESH_INFO:
